<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This file is part of Liferay Social Office. Liferay Social Office is free
 * software: you can redistribute it and/or modify it under the terms of the GNU
 * Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Liferay Social Office is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Liferay Social Office. If not, see http://www.gnu.org/licenses/agpl-3.0.html.
 */
--%>

<%
	PortletURL membersURL = PortletURLFactoryUtil.create(request, "socialactivitymessageportlet_WAR_socialactivitymessageportlet", themeDisplay.getPlid(), PortletRequest.RESOURCE_PHASE);
	membersURL.setParameter("p_p_resource_id", "members");
	membersURL.setParameter("siteid", String.valueOf(activitySet.getGroupId()));
%>

<div class="comments-container">
	<div class="comments-list"></div>

	<%	if(isOwner(themeDisplay.getUser(), activitySet.getGroupId(), themeDisplay.getCompanyId()) || PortalUtil.isOmniadmin(themeDisplay.getUserId())) {%>
	<portlet:actionURL name="updateComment" var="updateCommentURL" />
	<aui:form action="<%= updateCommentURL %>" method="post" name='<%= "fm" + activitySet.getActivitySetId() %>' autocomplete="off">
		<aui:input name="mvcPath" type="hidden" value="/activities/view.jsp" />
		<aui:input name="redirect" type="hidden" value="<%= HtmlUtil.escape(currentURL) %>" />
		<aui:input name="<%= Constants.CMD %>" type="hidden" value="<%= Constants.ADD %>" />
		<aui:input name="className" type="hidden" value="<%= className %>" />
		<aui:input name="classPK" type="hidden" value="<%= classPK %>" />
		<aui:input name="mbMessageIdOrMicroblogsEntryId" type="hidden" value="" />

		<div>
			<div class="span10">
				<div class="user-portrait">
				<span class="avatar">
					<a href="https://hioa.no/tilsatt/<%=user.getScreenName()%>">
						<img alt="<%= HtmlUtil.escape(user.getFullName()) %>" src="<%=user.getPortraitURL(themeDisplay)%>" />
					</a>
				</span>
				</div>
				<div class="comment-input-wrapper">
					<div id="<portlet:namespace />commentinput<%=activitySet.getActivitySetId()%>" class="comment-form wdt-emoji-bundle-enabled" data-placeholder="<%= LanguageUtil.get(pageContext, "leave-a-comment") %>"></div>
				</div>
				<aui:input type="hidden" label="" name="body" placeholder='<%= LanguageUtil.get(pageContext, "leave-a-comment") %>'/>
				<div class="comment-cards" id="<portlet:namespace />cards<%=activitySet.getActivitySetId()%>"></div>
				<div class="hide comment-alerts" id="<portlet:namespace />commentalert<%=activitySet.getActivitySetId()%>" data-placeholder="<%= LanguageUtil.get(pageContext, "alerts-placeholder") %>"></div>
				<aui:input type="hidden" label="" name="alerts" placeholder='<%= LanguageUtil.get(pageContext, "alerts-placeholder") %>'/>
			</div>
			<div class="span2">
				<aui:input type="submit" cssClass="btn btn-primary" name="post" value='<%= LanguageUtil.get(pageContext, "post") %>'/>
			</div>

			<aui:input name="submit" type="hidden" value="post" />
		</div>
	</aui:form>
	<%}%>
</div>

<%	if(isOwner(themeDisplay.getUser(), activitySet.getGroupId(), themeDisplay.getCompanyId())) {%>

<aui:script use="aui-base">
Liferay['<portlet:namespace />-wysiwyg-skip<%=activitySet.getActivitySetId()%>'] = [];
function getServiceSync() {
	var xhr = null;
	var args = parent.Liferay.Service.parseInvokeArgs(arguments);

	var syncIOConfig = {
		sync: true,
		on: {
			success: function(event, id, obj){
				xhr = obj;
			}
		}
	};

	args[1] = parent.AUI().merge(args[1], syncIOConfig);

	parent.Liferay.Service.invoke.apply(Liferay.Service, args);

	if(xhr){
		return eval('(' + xhr.responseText + ')');
	}
};
var updateCommentCards = function (editor) {
	var data = editor.getData();
	Liferay.Service(
			'/socialactivitymessage-portlet.hioasocialactivity/add-direct-cards',
			{
				body: data,
				ignore: JSON.stringify(Liferay['<portlet:namespace />-wysiwyg-skip<%=activitySet.getActivitySetId()%>'])
			},
			function(obj) {
				A.one('#<portlet:namespace />cards<%=activitySet.getActivitySetId()%>').setHTML(obj);
				A.one('#<portlet:namespace />cards<%=activitySet.getActivitySetId()%>').all('.remove-all').each(function (node) {
					node.on('click', function (event) {
						var card = event.currentTarget.ancestor('.card-rich');
						var url = card.one('.url a');
						Liferay['<portlet:namespace />-wysiwyg-skip<%=activitySet.getActivitySetId()%>'].push(url.getAttribute('href'));
						card.remove(true);
						card.destroy();
						updateCommentCards(editor, true);
					});
				});
			}
	);
};

var handleCommentLinkInsert = function (event) {
	if ('autolinkAdd' === event.name || 'linkEdit' === event.data.constructor.key) {
		updateCommentCards(event.editor);
	}
};
var form = A.one('#<portlet:namespace />fm<%= activitySet.getActivitySetId() %>');
selections = [{
	name: 'link',
	buttons: ['linkEdit'],
	test: AlloyEditor.SelectionTest.link
} , {
	name: 'text',
	buttons: ['removeFormat', 'bold', 'italic', 'underline', 'link'],
	test: AlloyEditor.SelectionTest.text
}];
var toolbars = {
	styles: {
		selections: selections,
		tabIndex: 1
	},
	add: {
		buttons: ['link'],
		tabIndex: 2
	}
};
noselections = [{
	name: 'text',
	buttons: [],
	test: AlloyEditor.SelectionTest.text
}];
var noToolbars = {
	styles: {
		selections: noselections,
		tabIndex: 1
	}
};
var editor = AlloyEditor.editable('<portlet:namespace />commentinput<%=activitySet.getActivitySetId()%>', {
	toolbars: toolbars
});
var alertEditor = AlloyEditor.editable('<portlet:namespace />commentalert<%=activitySet.getActivitySetId()%>', {
	toolbars: noToolbars
});
editor.get('nativeEditor').on('autolinkAdd', function (event) { handleCommentLinkInsert(event); });
editor.get('nativeEditor').on('actionPerformed', function (event) { handleCommentLinkInsert(event); });
A.io.request('<%=membersURL%>', {
	dataType: 'json',
	cache: true,
	autoLoad: true,
	on: {
		success: function () {
			var members = this.get('responseData');
			members.menuItemTemplate = function (item) {
				return '<div class="user-portrait">' +
						'<span class="avatar">' +
						'<img alt="'+item.original.key+'" src="'+item.original.portrait + '">' +
						'</span>' +
						'</div>' +
						item.string.split('#')[0] +
						'<div class="job-title">'+item.original.title+'</div>';
			};
			members.selectTemplate = function (item) {
				return getServiceSync(
						'/socialactivitymessage-portlet.hioasocialactivity/get-mention',
						{
							username: item.original.value
						}
				);
			};
			members.lookup = function(person) {
				return person.key + '#' + person.value;
			};
			var tribute = new Tribute(members);
			tribute.attach(form.one('#<portlet:namespace />commentinput<%=activitySet.getActivitySetId()%>').getDOMNode());
			tribute.attach(form.one('#<portlet:namespace />commentalert<%=activitySet.getActivitySetId()%>').getDOMNode());
		},
		error: function() {
			console.log('Error loading @mentions members')
		}
	}
});

var sp2 = form.one('.span2');
var al = form.one('#<portlet:namespace />commentalert<%=activitySet.getActivitySetId()%>');
editor.get('nativeEditor').on('focus', function() {
	editor.get('srcNode').classList.add('in-use');
	if (sp2) {
		sp2.addClass('in-use');
	}
	if (al) {
		al.removeClass('hide');
	}
});

	var pasteHtml = function(html, startPos, endPos) {
		var range = void 0,
		sel = void 0;
		sel = window.getSelection();
		range = document.createRange();
		range.setStart(sel.anchorNode, startPos);
		range.setEnd(sel.anchorNode, endPos);
		range.deleteContents();

		var el = document.createElement('div');
		el.innerHTML = html;
		var frag = document.createDocumentFragment(),
		node = void 0,
		lastNode = void 0;
		while (node = el.firstChild) {
		   lastNode = frag.appendChild(node);
		}
		range.insertNode(frag);

		// Preserve the selection
		if (lastNode) {
			range = range.cloneRange();
			range.setStartAfter(lastNode);
			range.collapse(true);
			sel.removeAllRanges();
			sel.addRange(range);
		}
	};

	editor.get('nativeEditor').on('contentDom', function () {
		editor.get('nativeEditor').document.on("input", function(event) {
			var content = window.getSelection().anchorNode.nodeValue;
			if (content !== null) {
				var found = content.match(/:([a-zA-Z-_]+):/);
				if (found !== null) {
					var cnt = found[0];
					var start = found.index;
					var end = found.index + cnt.length;
					pasteHtml(wdtEmojiBundle.render(cnt), start, end);
				}
			}
		});
	});

	wdtEmojiBundle.defaults.emojiSheets = {
	'apple': '<%=request.getContextPath()%>/activities/img/sheet_apple_64.png',
	'google': '<%=request.getContextPath()%>/activities/img/sheet_google_64.png',
	'twitter': '<%=request.getContextPath()%>/activities/img/sheet_twitter_64.png',
	'emojione': '<%=request.getContextPath()%>/activities/img/sheet_emojione_64.png'
	};

	wdtEmojiBundle.init('.wdt-emoji-bundle-enabled');

if (form) {
	form.on(
			'submit',
			function(event) {
				event.halt();
				var currentTarget = event.currentTarget;

				var activityFooter = currentTarget.ancestor('.activity-footer');
				var commentsContainer = currentTarget.ancestor('.comments-container');

				var form = commentsContainer.one('form');

				var cmdNode = form.one('#<portlet:namespace /><%= Constants.CMD %>');

				cmdNode.val('<%= Constants.ADD %>');

				var data = editor.get('nativeEditor').getData();
	            var alertsdata = alertEditor.get('nativeEditor').getData();
				var cards = A.one('#<portlet:namespace />cards<%=activitySet.getActivitySetId()%>').getHTML();
				form.one('#<portlet:namespace />body').set('value', data.replace(/<p>\s<\/p>/g, "") + cards);
	            form.one('#<portlet:namespace />alerts').set('value', alertsdata);

				A.io.request(
						form.attr('action'),
						{
							after: {
								success: function(event, id, obj) {
									var responseData = this.get('responseData');
									if (responseData.success) {
										var commentsList = commentsContainer.one('.comments-list');
										commentsList.removeClass('hide');
										responseData.original = responseData.body;
										<%
											PortletURL likeURL = PortletURLFactoryUtil.create(request, "socialactivitymessageportlet_WAR_socialactivitymessageportlet", themeDisplay.getPlid(), PortletRequest.RESOURCE_PHASE);
											likeURL.setParameter("p_p_resource_id", "like");
											likeURL.setParameter("type", "2");

											PortletURL getLikesURL = PortletURLFactoryUtil.create(request, "socialactivitymessageportlet_WAR_socialactivitymessageportlet", themeDisplay.getPlid(), PortletRequest.RESOURCE_PHASE);
											getLikesURL.setParameter("p_p_resource_id", "getLikes");
											getLikesURL.setParameter("type", "2");
										%>

										likesUrl = '<%=likeURL.toString()%>'+ "&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_contentId="+encodeURIComponent(responseData.mbMessageIdOrMicroblogsEntryId);
										likesUrl += "&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_activityId="+encodeURIComponent(<%=activitySet.getActivitySetId()%>);
										getLikesUrl = '<%=getLikesURL.toString()%>'+ "&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_contentId="+encodeURIComponent(responseData.mbMessageIdOrMicroblogsEntryId);

										Liferay.SO.Activities.addNewComment(commentsList, responseData, likesUrl, getLikesUrl);
										<%
											PortletURL notificationURL = PortletURLFactoryUtil.create(request, "socialactivitymessageportlet_WAR_socialactivitymessageportlet", themeDisplay.getPlid(), PortletRequest.RESOURCE_PHASE);
											notificationURL.setParameter("p_p_resource_id", "sendNotifications");
											notificationURL.setParameter("type", "create");
										%>
										var activity = currentTarget.ancestor('.activity-item');
										var activity_id = activity.get('id').split(/_/).pop();

										var notUri = '<%=notificationURL%>&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_showSingle='+activity_id+'&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_messageId='+responseData.mbMessageIdOrMicroblogsEntryId;
										var al = form.one('#<portlet:namespace />alerts');
										if (al) {
											notUri = notUri + "&_socialactivitymessageportlet_WAR_socialactivitymessageportlet_alerts="+encodeURIComponent(al.get('value'));
										}

										A.io.request(notUri, {
											dataType: 'json',
											cache: true,
											autoLoad: true,
											on: {
												success: function () {
												},
												error: function() {
													console.log('Error sending notifications')
												}
											}
										});

										var viewComments = activityFooter.one('.view-comments a');

										var viewCommentsHtml = viewComments.get('innerHTML');

										var messagesCount = parseInt(viewCommentsHtml) + 1;

										if (isNaN(messagesCount)) {
											messagesCount = 1;
										}

										viewComments.html(
												messagesCount +
												(messagesCount > 1 ? ' <%= UnicodeLanguageUtil.get(pageContext, "comments") %>' : ' <%= UnicodeLanguageUtil.get(pageContext, "comment") %>')
										);

	                                    editor.get('nativeEditor').setData('');
	                                    editor.get('srcNode').classList.remove('in-use');
										var sp2 = form.one('.span2');
										if (sp2) {
											sp2.removeClass('in-use');
										}
	                                    var al = form.one('#<portlet:namespace />commentalert<%=activitySet.getActivitySetId()%>');
										if (al) {
											al.addClass('hide');
										}
	                                    A.one('#<portlet:namespace />cards<%=activitySet.getActivitySetId()%>').setHTML(obj);
	editor.get('nativeEditor').on('focus', function() {
	editor.get('srcNode').classList.add('in-use');
	if (sp2) {
	sp2.addClass('in-use');
	}
	if (al) {
	al.removeClass('hide');
	}
	});
									}
								}
							},
							dataType: 'json',
							form: {
								id: form
							}
						}
				);
			}
	);
}
</aui:script>

<%}%>